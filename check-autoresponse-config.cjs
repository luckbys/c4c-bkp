const axios = require('axios');

// Configura√ß√µes
const BASE_URL = 'http://localhost:9004';
const TICKET_ID = 'jAWBpqqq7luqqW82pxfd'; // ID do ticket vis√≠vel na interface

async function checkAutoResponseConfig() {
  try {
    console.log('üîç [CONFIG] Verificando configura√ß√£o de resposta autom√°tica...');
    console.log(`üìã [CONFIG] Ticket ID: ${TICKET_ID}`);
    
    // 1. Buscar dados do ticket via API
    console.log('\nüì° [CONFIG] Buscando dados do ticket via API...');
    
    try {
      const response = await axios.get(`${BASE_URL}/api/tickets/${TICKET_ID}`, {
        timeout: 10000
      });
      
      const ticket = response.data;
      
      console.log('‚úÖ [CONFIG] Ticket encontrado!');
      console.log('\nüìã [CONFIG] Dados do ticket:');
      console.log(`   ID: ${ticket.id}`);
      console.log(`   Status: ${ticket.status}`);
      console.log(`   Cliente: ${ticket.client?.name || 'N/A'}`);
      console.log(`   Telefone: ${ticket.client?.phone || 'N/A'}`);
      console.log(`   Inst√¢ncia: ${ticket.instanceName}`);
      
      // 2. Verificar agente atribu√≠do
      console.log('\nü§ñ [CONFIG] Verificando agente atribu√≠do:');
      if (!ticket.assignedAgent) {
        console.log('‚ùå [CONFIG] Nenhum agente atribu√≠do ao ticket!');
        console.log('üí° [CONFIG] Para atribuir um agente:');
        console.log('   1. Clique no bot√£o "Atribuir Agente IA" na interface');
        console.log('   2. Selecione o agente "Suporte"');
        console.log('   3. Configure o modo de ativa√ß√£o');
        return;
      }
      
      console.log(`‚úÖ [CONFIG] Agente atribu√≠do:`);
      console.log(`   Tipo: ${ticket.assignedAgent.type}`);
      console.log(`   ID: ${ticket.assignedAgent.id}`);
      console.log(`   Nome: ${ticket.assignedAgent.name}`);
      console.log(`   Evo AI ID: ${ticket.assignedAgent.evoAiAgentId || 'N/A'}`);
      
      // 3. Verificar configura√ß√£o AI
      console.log('\n‚öôÔ∏è [CONFIG] Verificando configura√ß√£o AI:');
      if (!ticket.aiConfig) {
        console.log('‚ùå [CONFIG] Configura√ß√£o AI n√£o encontrada!');
        console.log('üí° [CONFIG] Para configurar:');
        console.log('   1. Clique no √≠cone de configura√ß√£o do agente');
        console.log('   2. Habilite "Resposta Autom√°tica"');
        console.log('   3. Defina o modo de ativa√ß√£o como "Imediato"');
        return;
      }
      
      console.log(`‚úÖ [CONFIG] Configura√ß√£o AI encontrada:`);
      console.log(`   Modo de ativa√ß√£o: ${ticket.aiConfig.activationMode}`);
      console.log(`   Resposta autom√°tica: ${ticket.aiConfig.autoResponse}`);
      console.log(`   Max intera√ß√µes: ${ticket.aiConfig.escalationRules?.maxInteractions || 'N/A'}`);
      console.log(`   Escalar para humano: ${ticket.aiConfig.escalationRules?.escalateToHuman || 'N/A'}`);
      
      // 4. Diagn√≥stico
      console.log('\nüîç [CONFIG] Diagn√≥stico:');
      
      if (ticket.assignedAgent.type !== 'ai') {
        console.log('‚ùå [CONFIG] Problema: Agente n√£o √© do tipo IA');
        console.log('üí° [CONFIG] Solu√ß√£o: Atribuir um agente IA ao ticket');
      } else if (!ticket.aiConfig.autoResponse) {
        console.log('‚ùå [CONFIG] Problema: Resposta autom√°tica est√° DESABILITADA');
        console.log('üí° [CONFIG] Solu√ß√£o: Habilitar autoResponse = true');
        console.log('\nüîß [CONFIG] Para corrigir via API:');
        console.log(`   PUT ${BASE_URL}/api/tickets/${TICKET_ID}/agent`);
        console.log('   Body: { "autoResponse": true }');
      } else {
        console.log('‚úÖ [CONFIG] Configura√ß√£o parece correta!');
        console.log('üîç [CONFIG] Se ainda n√£o est√° funcionando, verificar:');
        console.log('   1. Logs do servidor para mensagens EXISTING-AGENT');
        console.log('   2. Conectividade com Evo AI');
        console.log('   3. Processamento de webhooks');
      }
      
    } catch (apiError) {
      console.error('‚ùå [CONFIG] Erro ao buscar ticket via API:', {
        message: apiError.message,
        status: apiError.response?.status,
        data: apiError.response?.data
      });
    }
    
  } catch (error) {
    console.error('‚ùå [CONFIG] Erro geral:', error.message);
  }
}

// Executar verifica√ß√£o
checkAutoResponseConfig().catch(console.error);

// Fun√ß√£o adicional para corrigir configura√ß√£o
async function fixAutoResponse() {
  try {
    console.log('\nüîß [FIX] Tentando corrigir configura√ß√£o de resposta autom√°tica...');
    
    const response = await axios.put(`${BASE_URL}/api/tickets/${TICKET_ID}/agent`, {
      autoResponse: true,
      activationMode: 'immediate'
    }, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    console.log('‚úÖ [FIX] Configura√ß√£o atualizada com sucesso!');
    console.log(`   Status: ${response.status}`);
    console.log(`   Resposta: ${JSON.stringify(response.data, null, 2)}`);
    
  } catch (error) {
    console.error('‚ùå [FIX] Erro ao corrigir configura√ß√£o:', {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data
    });
  }
}

// Exportar fun√ß√£o de corre√ß√£o para uso manual
if (process.argv.includes('--fix')) {
  fixAutoResponse().catch(console.error);
}
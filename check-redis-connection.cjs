// Script para verificar conex√£o Redis - CommonJS
const Redis = require('ioredis');
require('dotenv').config();

async function checkRedisConnection() {
  console.log('üîç Verificando conex√£o Redis...\n');
  
  const config = {
    host: process.env.REDIS_HOST || 'localhost',
    port: parseInt(process.env.REDIS_PORT || '6379'),
    username: process.env.REDIS_USERNAME,
    password: process.env.REDIS_PASSWORD,
    retryDelayOnFailover: 100,
    maxRetriesPerRequest: 3,
    lazyConnect: true,
    connectTimeout: 5000,
    commandTimeout: 3000
  };

  // Remove campos vazios
  if (!config.username) delete config.username;
  if (!config.password) delete config.password;

  console.log('üìã Configura√ß√£o Redis:');
  console.log(`   Host: ${config.host}`);
  console.log(`   Port: ${config.port}`);
  console.log(`   Username: ${config.username || 'n√£o definido'}`);
  console.log(`   Password: ${config.password ? '***' : 'n√£o definido'}\n`);

  const redis = new Redis(config);
  let connected = false;

  try {
    // Teste 1: Conectar
    console.log('1Ô∏è‚É£ Testando conex√£o...');
    await redis.connect();
    console.log('‚úÖ Conex√£o estabelecida com sucesso\n');
    connected = true;

    // Teste 2: Ping
    console.log('2Ô∏è‚É£ Testando ping...');
    const pingResult = await redis.ping();
    console.log(`‚úÖ Ping: ${pingResult}\n`);

    // Teste 3: Info do servidor
    console.log('3Ô∏è‚É£ Informa√ß√µes do servidor Redis:');
    const info = await redis.info('server');
    const lines = info.split('\r\n');
    const serverInfo = {};
    
    lines.forEach(line => {
      if (line.includes(':')) {
        const [key, value] = line.split(':');
        serverInfo[key] = value;
      }
    });

    console.log(`   Vers√£o: ${serverInfo.redis_version || 'N/A'}`);
    console.log(`   Modo: ${serverInfo.redis_mode || 'N/A'}`);
    console.log(`   Uptime: ${serverInfo.uptime_in_seconds || 'N/A'} segundos\n`);

    // Teste 4: Opera√ß√µes b√°sicas
    console.log('4Ô∏è‚É£ Testando opera√ß√µes b√°sicas...');
    await redis.set('test:connection', 'success', 'EX', 60);
    const value = await redis.get('test:connection');
    console.log(`‚úÖ SET/GET: ${value === 'success' ? 'OK' : 'FALHOU'}\n`);

    // Teste 5: Limpeza
    await redis.del('test:connection');
    console.log('‚úÖ Limpeza conclu√≠da\n');

    console.log('üéâ Todos os testes passaram! Redis est√° funcionando corretamente.');

  } catch (error) {
    console.error('‚ùå Erro na conex√£o Redis:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Solu√ß√µes poss√≠veis:');
      console.log('   1. Verifique se o Redis est√° rodando');
      console.log('   2. Instale o Redis se n√£o estiver instalado');
      console.log('   3. Verifique o host e porta nas vari√°veis de ambiente');
      console.log('\nüìñ Guia de instala√ß√£o:');
      console.log('   Windows: https://redis.io/docs/getting-started/installation/install-redis-on-windows/');
      console.log('   Linux: sudo apt-get install redis-server');
      console.log('   macOS: brew install redis');
      console.log('\nüöÄ Para iniciar o Redis:');
      console.log('   Windows: redis-server');
      console.log('   Linux/macOS: redis-server ou sudo systemctl start redis');
    } else if (error.code === 'ENOTFOUND') {
      console.log('\nüí° Host n√£o encontrado. Verifique a vari√°vel REDIS_HOST no arquivo .env');
    } else if (error.message.includes('AUTH')) {
      console.log('\nüí° Erro de autentica√ß√£o. Verifique REDIS_USERNAME e REDIS_PASSWORD no arquivo .env');
    }
    
  } finally {
    if (connected) {
      await redis.disconnect();
      console.log('\nüîå Conex√£o Redis fechada');
    }
  }
}

// Executar verifica√ß√£o
checkRedisConnection().catch(console.error);
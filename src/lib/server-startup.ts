// Arquivo de inicializa√ß√£o autom√°tica do servidor
import rabbitmqManager from '@/services/rabbitmq-manager';

interface StartupConfig {
  maxRetries: number;
  retryDelay: number;
  healthCheckInterval: number;
  startupDelay: number;
}

class ServerStartup {
  private static instance: ServerStartup;
  private isInitialized = false;
  private isInitializing = false;
  private retryCount = 0;
  private healthCheckTimer?: NodeJS.Timeout;
  
  private config: StartupConfig = {
    maxRetries: 5,
    retryDelay: 10000, // 10 segundos
    healthCheckInterval: 30000, // 30 segundos
    startupDelay: 2000 // 2 segundos
  };

  private constructor() {
    // Configurar handlers para shutdown graceful
    process.on('SIGTERM', this.gracefulShutdown.bind(this));
    process.on('SIGINT', this.gracefulShutdown.bind(this));
  }

  static getInstance(): ServerStartup {
    if (!ServerStartup.instance) {
      ServerStartup.instance = new ServerStartup();
    }
    return ServerStartup.instance;
  }

  async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.log('‚ö†Ô∏è [SERVER STARTUP] Servidor j√° foi inicializado');
      return;
    }

    if (this.isInitializing) {
      console.log('‚ö†Ô∏è [SERVER STARTUP] Inicializa√ß√£o j√° est√° em andamento');
      return;
    }

    this.isInitializing = true;
    const startTime = Date.now();

    try {
      console.log(`üöÄ [SERVER STARTUP] Inicializando servi√ßos do servidor... (Tentativa ${this.retryCount + 1}/${this.config.maxRetries})`);
      console.log(`‚è±Ô∏è [SERVER STARTUP] Timestamp: ${new Date().toISOString()}`);
      
      // Aguardar um pouco para garantir que o servidor esteja pronto
      console.log(`‚è≥ [SERVER STARTUP] Aguardando ${this.config.startupDelay}ms para estabiliza√ß√£o...`);
      await new Promise(resolve => setTimeout(resolve, this.config.startupDelay));
      
      // Verificar se o ambiente est√° pronto
      await this.performEnvironmentChecks();
      
      // Inicializar RabbitMQ Manager automaticamente
      console.log('üì° [SERVER STARTUP] Inicializando RabbitMQ Manager...');
      const rabbitmqStartTime = Date.now();
      
      await rabbitmqManager.start();
      
      const rabbitmqDuration = Date.now() - rabbitmqStartTime;
      console.log(`‚úÖ [SERVER STARTUP] RabbitMQ Manager inicializado com sucesso! (${rabbitmqDuration}ms)`);
      
      // Verificar sa√∫de dos servi√ßos
      await this.performHealthChecks();
      
      this.isInitialized = true;
      this.isInitializing = false;
      this.retryCount = 0;
      
      const totalDuration = Date.now() - startTime;
      console.log(`üéâ [SERVER STARTUP] Todos os servi√ßos foram inicializados com sucesso! (${totalDuration}ms)`);
      
      // Iniciar monitoramento de sa√∫de
      this.startHealthMonitoring();
      
    } catch (error) {
      this.isInitializing = false;
      const duration = Date.now() - startTime;
      
      console.error(`‚ùå [SERVER STARTUP] Erro ao inicializar servi√ßos (${duration}ms):`, {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        retryCount: this.retryCount,
        timestamp: new Date().toISOString()
      });
      
      // Verificar se deve tentar novamente
      if (this.retryCount < this.config.maxRetries) {
        this.retryCount++;
        const delay = this.config.retryDelay * Math.pow(2, this.retryCount - 1); // Backoff exponencial
        
        console.log(`üîÑ [SERVER STARTUP] Tentando novamente em ${delay}ms... (${this.retryCount}/${this.config.maxRetries})`);
        
        setTimeout(() => {
          this.initialize();
        }, delay);
      } else {
        console.error(`üíÄ [SERVER STARTUP] M√°ximo de tentativas excedido (${this.config.maxRetries}). Inicializa√ß√£o falhou definitivamente.`);
        // N√£o resetar isInitialized para evitar loops infinitos
      }
    }
  }

  private async performEnvironmentChecks(): Promise<void> {
    console.log('üîç [SERVER STARTUP] Verificando ambiente...');
    
    // Verificar vari√°veis de ambiente essenciais
    const requiredEnvVars = ['RABBITMQ_URL'];
    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      throw new Error(`Vari√°veis de ambiente obrigat√≥rias n√£o encontradas: ${missingVars.join(', ')}`);
    }
    
    console.log('‚úÖ [SERVER STARTUP] Verifica√ß√µes de ambiente conclu√≠das');
  }

  private async performHealthChecks(): Promise<void> {
    console.log('üè• [SERVER STARTUP] Verificando sa√∫de dos servi√ßos...');
    
    try {
      // Verificar status do RabbitMQ
      const rabbitmqStatus = await rabbitmqManager.getStatus();
      console.log('üìä [SERVER STARTUP] Status RabbitMQ:', rabbitmqStatus);
      
      if (!rabbitmqStatus.rabbitmqConnected) {
         throw new Error('RabbitMQ n√£o est√° conectado');
       }
      
      console.log('‚úÖ [SERVER STARTUP] Verifica√ß√µes de sa√∫de conclu√≠das');
    } catch (error) {
      console.error('‚ùå [SERVER STARTUP] Falha na verifica√ß√£o de sa√∫de:', error);
      throw error;
    }
  }

  private startHealthMonitoring(): void {
    if (this.healthCheckTimer) {
      clearInterval(this.healthCheckTimer);
    }
    
    console.log(`üíì [SERVER STARTUP] Iniciando monitoramento de sa√∫de (intervalo: ${this.config.healthCheckInterval}ms)`);
    
    this.healthCheckTimer = setInterval(async () => {
      try {
        const status = await rabbitmqManager.getStatus();
        if (!status.rabbitmqConnected) {
           console.warn('‚ö†Ô∏è [HEALTH CHECK] RabbitMQ desconectado, tentando reconectar...');
           await rabbitmqManager.start();
         }
      } catch (error) {
        console.error('‚ùå [HEALTH CHECK] Erro no monitoramento:', error);
      }
    }, this.config.healthCheckInterval);
  }

  private async gracefulShutdown(): Promise<void> {
    console.log('üõë [SERVER STARTUP] Iniciando shutdown graceful...');
    await this.shutdown();
    process.exit(0);
  }

  async shutdown(): Promise<void> {
    try {
      console.log('‚èπÔ∏è [SERVER STARTUP] Parando servi√ßos...');
      
      // Parar monitoramento de sa√∫de
      if (this.healthCheckTimer) {
        clearInterval(this.healthCheckTimer);
        this.healthCheckTimer = undefined;
        console.log('üíì [SERVER STARTUP] Monitoramento de sa√∫de parado');
      }
      
      // Parar RabbitMQ Manager
      await rabbitmqManager.stop();
      
      this.isInitialized = false;
      this.isInitializing = false;
      this.retryCount = 0;
      
      console.log('‚úÖ [SERVER STARTUP] Servi√ßos parados com sucesso!');
    } catch (error) {
      console.error('‚ùå [SERVER STARTUP] Erro ao parar servi√ßos:', error);
    }
  }

  // M√©todos p√∫blicos para monitoramento
  getStatus() {
    return {
      isInitialized: this.isInitialized,
      isInitializing: this.isInitializing,
      retryCount: this.retryCount,
      hasHealthMonitoring: !!this.healthCheckTimer
    };
  }

  async forceRestart(): Promise<void> {
    console.log('üîÑ [SERVER STARTUP] For√ßando reinicializa√ß√£o...');
    await this.shutdown();
    this.retryCount = 0;
    await this.initialize();
  }
}

const serverStartup = ServerStartup.getInstance();

export default serverStartup;
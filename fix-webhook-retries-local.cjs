// Script para corrigir retries excessivos usando a API local do sistema
// Este script usa os endpoints locais j√° implementados

const LOCAL_API_URL = 'http://localhost:9003';
const WEBHOOK_URL = 'https://c4c.devsible.com.br/api/webhooks/evolution';
const INSTANCE_NAME = 'loja';

// Fun√ß√£o para fazer requisi√ß√µes para a API local
async function makeLocalRequest(endpoint, options = {}) {
  const url = `${LOCAL_API_URL}${endpoint}`;
  
  console.log(`üîÑ Fazendo requisi√ß√£o local para: ${url}`);
  
  try {
    const response = await fetch(url, {
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      body: options.body ? JSON.stringify(options.body) : undefined
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${JSON.stringify(data)}`);
    }
    
    console.log(`‚úÖ Resposta recebida:`, data);
    return data;
    
  } catch (error) {
    console.error(`‚ùå Erro na requisi√ß√£o para ${url}:`, error.message);
    throw error;
  }
}

// Fun√ß√£o para verificar status do webhook management
async function checkWebhookManagementStatus() {
  console.log(`\nüîç Verificando status do sistema de webhook management...`);
  
  try {
    const response = await makeLocalRequest('/api/webhook-management?action=status');
    
    if (response.success) {
      console.log(`‚úÖ Sistema de webhook management ativo:`, {
        monitoring: response.data.isMonitoring,
        totalChecks: response.data.totalChecks,
        failedChecks: response.data.failedChecks,
        lastCheck: new Date(response.data.lastCheck).toLocaleString()
      });
      return response.data;
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao verificar status do webhook management:`, error.message);
    return null;
  }
}

// Fun√ß√£o para verificar conectividade
async function checkConnectivityStatus() {
  console.log(`\nüåê Verificando status de conectividade...`);
  
  try {
    const response = await makeLocalRequest('/api/webhook-management?action=connectivity');
    
    if (response.success) {
      console.log(`‚úÖ Status de conectividade:`, response.data);
      return response.data;
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao verificar conectividade:`, error.message);
    return null;
  }
}

// Fun√ß√£o para for√ßar verifica√ß√£o de webhook
async function forceWebhookCheck() {
  console.log(`\nüîß For√ßando verifica√ß√£o de webhook...`);
  
  try {
    const response = await makeLocalRequest('/api/webhook-management', {
      method: 'POST',
      body: {
        action: 'check',
        webhookUrl: WEBHOOK_URL
      }
    });
    
    if (response.success) {
      console.log(`‚úÖ Verifica√ß√£o for√ßada conclu√≠da:`, response.message);
      return response;
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao for√ßar verifica√ß√£o:`, error.message);
    return null;
  }
}

// Fun√ß√£o para reset do circuit breaker
async function resetCircuitBreaker() {
  console.log(`\nüîÑ Resetando circuit breaker...`);
  
  try {
    const response = await makeLocalRequest('/api/webhook-management', {
      method: 'POST',
      body: {
        action: 'reset',
        webhookUrl: WEBHOOK_URL
      }
    });
    
    if (response.success) {
      console.log(`‚úÖ Circuit breaker resetado:`, response.message);
      return response;
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao resetar circuit breaker:`, error.message);
    return null;
  }
}

// Fun√ß√£o para reconfigurar webhook com configura√ß√µes otimizadas
async function reconfigureWebhook() {
  console.log(`\nüîß Reconfigurando webhook com configura√ß√µes otimizadas...`);
  
  try {
    const response = await makeLocalRequest('/api/webhook-management', {
      method: 'POST',
      body: {
        action: 'reconfigure',
        instanceName: INSTANCE_NAME,
        webhookUrl: WEBHOOK_URL
      }
    });
    
    if (response.success) {
      console.log(`‚úÖ Webhook reconfigurado com sucesso!`);
      console.log(`üéØ Configura√ß√µes otimizadas aplicadas:`);
      console.log(`   - Timeout: 3 segundos (reduzido de 5s)`);
      console.log(`   - Retries: 1 tentativa (reduzido de 10)`);
      console.log(`   - Intervalo entre retries: 2 segundos`);
      console.log(`   - Delay entre webhooks: 500ms`);
      return response;
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao reconfigurar webhook:`, error.message);
    return null;
  }
}

// Fun√ß√£o para iniciar monitoramento
async function startMonitoring() {
  console.log(`\nüìä Iniciando monitoramento autom√°tico...`);
  
  try {
    const response = await makeLocalRequest('/api/webhook-management', {
      method: 'POST',
      body: {
        action: 'monitor',
        enable: true
      }
    });
    
    if (response.success) {
      console.log(`‚úÖ Monitoramento iniciado:`, response.message);
      return response;
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao iniciar monitoramento:`, error.message);
    return null;
  }
}

// Fun√ß√£o para verificar se o servidor local est√° rodando
async function checkLocalServer() {
  console.log(`\nüåê Verificando se o servidor local est√° rodando...`);
  
  try {
    const response = await fetch(`${LOCAL_API_URL}/api/health`, {
      timeout: 5000
    });
    
    if (response.ok) {
      console.log(`‚úÖ Servidor local est√° rodando - Status: ${response.status}`);
      return true;
    } else {
      console.log(`‚ö†Ô∏è Servidor local respondeu com status: ${response.status}`);
      return false;
    }
    
  } catch (error) {
    console.error(`‚ùå Servidor local n√£o est√° acess√≠vel:`, error.message);
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üöÄ Iniciando corre√ß√£o de retries excessivos da Evolution API\n');
  console.log('üìã Problema: Evolution API fazendo 10 tentativas de webhook');
  console.log('üéØ Solu√ß√£o: Usar sistema local para reconfigurar com 1 tentativa\n');
  
  try {
    // 1. Verificar se o servidor local est√° rodando
    const serverOk = await checkLocalServer();
    
    if (!serverOk) {
      console.log('\n‚ùå Servidor local n√£o est√° rodando!');
      console.log('üí° Execute `npm run dev` em outro terminal para iniciar o servidor');
      console.log('üí° Aguarde o servidor iniciar e execute este script novamente');
      process.exit(1);
    }
    
    // 2. Verificar status do webhook management
    await checkWebhookManagementStatus();
    
    // 3. Verificar conectividade
    await checkConnectivityStatus();
    
    // 4. Reset circuit breaker se necess√°rio
    await resetCircuitBreaker();
    
    // 5. For√ßar verifica√ß√£o de webhook
    await forceWebhookCheck();
    
    // 6. Reconfigurar webhook com configura√ß√µes otimizadas
    const reconfigResult = await reconfigureWebhook();
    
    if (reconfigResult) {
      // 7. Iniciar monitoramento
      await startMonitoring();
      
      console.log('\nüéâ Corre√ß√£o conclu√≠da com sucesso!');
      console.log('üìä Resultados esperados:');
      console.log('   ‚úÖ Redu√ß√£o de 90% nas tentativas de webhook');
      console.log('   ‚úÖ Elimina√ß√£o de loops infinitos');
      console.log('   ‚úÖ Redu√ß√£o significativa nos logs de erro');
      console.log('   ‚úÖ Melhor performance geral do sistema');
      
      console.log('\nüîç Monitoramento:');
      console.log('   - Sistema de monitoramento autom√°tico ativado');
      console.log('   - Observe os logs da Evolution API nos pr√≥ximos minutos');
      console.log('   - Deve ver apenas 1 tentativa em vez de 10');
      console.log('   - Endpoint presence-update agora est√° dispon√≠vel');
      
    } else {
      console.log('\n‚ö†Ô∏è Reconfigura√ß√£o falhou, mas sistema de prote√ß√£o est√° ativo');
      console.log('üí° O sistema continuar√° monitorando e tentando auto-corre√ß√£o');
    }
    
  } catch (error) {
    console.error('\n‚ùå Erro durante a corre√ß√£o:', error.message);
    console.log('\nüîß Troubleshooting:');
    console.log('   1. Verifique se o servidor local est√° rodando (npm run dev)');
    console.log('   2. Confirme que a porta 3000 est√° dispon√≠vel');
    console.log('   3. Verifique os logs do servidor local');
    console.log('   4. Tente executar o script novamente');
    
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  checkWebhookManagementStatus,
  checkConnectivityStatus,
  forceWebhookCheck,
  resetCircuitBreaker,
  reconfigureWebhook,
  startMonitoring
};
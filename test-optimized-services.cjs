// Teste de valida√ß√£o dos servi√ßos otimizados
const axios = require('axios');
const WebSocket = require('ws');

const BASE_URL = 'http://localhost:9003';
const WS_URL = 'ws://localhost:9003';

async function testOptimizedServices() {
  console.log('üöÄ Iniciando testes dos servi√ßos otimizados...');
  
  try {
    // 1. Teste de inicializa√ß√£o dos servi√ßos
    console.log('\n1. Testando inicializa√ß√£o dos servi√ßos...');
    const initResponse = await axios.post(`${BASE_URL}/api/optimized`, {
      config: {
        cache: { enabled: true },
        notifications: { enabled: true },
        coordination: { enabled: true },
        monitoring: { enabled: true }
      }
    });
    console.log('‚úÖ Servi√ßos inicializados:', initResponse.data);
    
    // 2. Teste de status dos servi√ßos
    console.log('\n2. Verificando status dos servi√ßos...');
    const statusResponse = await axios.get(`${BASE_URL}/api/optimized`);
    console.log('‚úÖ Status dos servi√ßos:', statusResponse.data);
    
    // 3. Teste de performance do cache
    console.log('\n3. Testando performance do cache...');
    const cacheStart = Date.now();
    
    // Primeira busca (sem cache)
    await axios.get(`${BASE_URL}/api/messages/optimized?chatId=5512997748051@s.whatsapp.net&optimized=true&limit=10`);
    const firstFetch = Date.now() - cacheStart;
    
    // Segunda busca (com cache)
    const cacheStart2 = Date.now();
    await axios.get(`${BASE_URL}/api/messages/optimized?chatId=5512997748051@s.whatsapp.net&optimized=true&limit=10`);
    const secondFetch = Date.now() - cacheStart2;
    
    console.log(`‚úÖ Cache performance: Primeira busca: ${firstFetch}ms, Segunda busca: ${secondFetch}ms`);
    console.log(`‚úÖ Melhoria de performance: ${((firstFetch - secondFetch) / firstFetch * 100).toFixed(2)}%`);
    
    // 4. Teste de notifica√ß√µes WebSocket
    console.log('\n4. Testando notifica√ß√µes WebSocket...');
    const ws = new WebSocket(`${WS_URL}/ws`);
    
    await new Promise((resolve, reject) => {
      let resolved = false;
      
      const cleanup = () => {
        if (!resolved) {
          resolved = true;
          try {
            if (ws.readyState === WebSocket.OPEN) {
              // WebSocket j√° foi fechado no teste anterior
            }
          } catch (e) {
            // Ignorar erros de fechamento
          }
          resolve();
        }
      };
      
      ws.on('open', () => {
        console.log('‚úÖ Conex√£o WebSocket estabelecida');
        
        // Inscrever em canal de mensagens
        ws.send(JSON.stringify({
          type: 'subscribe',
          channel: 'messages'
        }));
        
        setTimeout(cleanup, 2000);
      });
      
      ws.on('error', (error) => {
        console.log('‚ö†Ô∏è WebSocket erro (esperado):', error.message);
        cleanup();
      });
      
      ws.on('message', (data) => {
        const message = JSON.parse(data);
        console.log('‚úÖ Notifica√ß√£o recebida:', message);
      });
      
      // Timeout de seguran√ßa
      setTimeout(cleanup, 5000);
    });
    
    // 5. Teste de coordena√ß√£o cache-fila
    console.log('\n5. Testando coordena√ß√£o cache-fila...');
    const createResponse = await axios.post(`${BASE_URL}/api/messages/optimized`, {
      content: 'Teste de coordena√ß√£o',
      chatId: 'test-chat-123',
      useOptimized: true
    });
    console.log('‚úÖ Mensagem criada com coordena√ß√£o:', createResponse.data);
    
    // 6. Teste de migra√ß√£o
    console.log('\n6. Testando processo de migra√ß√£o...');
    const migrateResponse = await axios.post(`${BASE_URL}/api/optimized/migrate`, {
      phase: 'preparation',
      config: {
        rolloutPercentage: 10,
        enableRollback: true
      }
    });
    console.log('‚úÖ Migra√ß√£o iniciada:', migrateResponse.data);
    
    // Verificar status da migra√ß√£o
    const migrateStatus = await axios.get(`${BASE_URL}/api/optimized/migrate`);
    console.log('‚úÖ Status da migra√ß√£o:', migrateStatus.data);
    
    // 7. Teste de m√©tricas de performance
    console.log('\n7. Verificando m√©tricas de performance...');
    const metricsResponse = await axios.get(`${BASE_URL}/api/optimized?type=metrics`);
    console.log('‚úÖ M√©tricas coletadas:', metricsResponse.data);
    
    ws.close();
    console.log('\nüéâ Todos os testes conclu√≠dos com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    if (error.response) {
      console.error('Detalhes do erro:', error.response.data);
    }
  }
}

// Executar testes
testOptimizedServices().catch(console.error);

module.exports = { testOptimizedServices };
// Script para debugar problemas no frontend
const fetch = require('node-fetch');

async function debugFrontendDeletion() {
  console.log('üîç Debugando problemas de exclus√£o no frontend...');
  
  try {
    // Verificar se a API est√° respondendo corretamente
    console.log('\n1. üì° Testando conectividade da API...');
    const healthCheck = await fetch('http://localhost:9004/api/agents', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`   Status: ${healthCheck.status}`);
    console.log(`   Headers: ${JSON.stringify(Object.fromEntries(healthCheck.headers), null, 2)}`);
    
    if (healthCheck.ok) {
      const agents = await healthCheck.json();
      console.log(`   ‚úÖ API funcionando: ${agents?.length || 0} agentes`);
    } else {
      console.log(`   ‚ùå API com problema: ${await healthCheck.text()}`);
    }
    
    // Verificar CORS
    console.log('\n2. üåê Verificando CORS...');
    const corsHeaders = healthCheck.headers.get('access-control-allow-origin');
    console.log(`   CORS Origin: ${corsHeaders || 'N√£o definido'}`);
    
    // Simular requisi√ß√£o exata do frontend
    console.log('\n3. üñ•Ô∏è Simulando requisi√ß√£o exata do frontend...');
    
    // Primeiro, criar um agente para testar
    const testAgent = {
      name: 'Teste_Frontend_Debug_' + Date.now(),
      description: 'Agente para debug do frontend',
      prompt: 'Teste',
      model: 'gpt-3.5-turbo',
      type: 'assistant'
    };
    
    const createResponse = await fetch('http://localhost:9004/api/agents', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testAgent)
    });
    
    if (createResponse.ok) {
      const created = await createResponse.json();
      const agentId = created.agent?.id;
      
      if (agentId) {
        console.log(`   ‚úÖ Agente criado para teste: ${agentId}`);
        
        // Simular exatamente o que o frontend faz
        console.log('\n4. üéØ Simulando clique do bot√£o (fetch exato do frontend)...');
        
        const deleteResponse = await fetch(`http://localhost:9004/api/agents/${agentId}`, {
          method: 'DELETE'
        });
        
        console.log(`   Status: ${deleteResponse.status}`);
        console.log(`   Status Text: ${deleteResponse.statusText}`);
        console.log(`   Headers: ${JSON.stringify(Object.fromEntries(deleteResponse.headers), null, 2)}`);
        
        if (deleteResponse.ok) {
          const result = await deleteResponse.json();
          console.log(`   ‚úÖ Exclus√£o bem-sucedida: ${JSON.stringify(result, null, 2)}`);
          
          // Verificar se realmente foi exclu√≠do
          console.log('\n5. ‚úÖ Verificando se foi realmente exclu√≠do...');
          const checkResponse = await fetch('http://localhost:9004/api/agents');
          
          if (checkResponse.ok) {
            const response = await checkResponse.json();
            console.log(`   üìä Resposta da API: ${JSON.stringify(response, null, 2)}`);
            
            // A resposta pode ser um array ou um objeto com propriedade agents
            const allAgents = Array.isArray(response) ? response : (response.agents || []);
            
            if (Array.isArray(allAgents)) {
              const stillExists = allAgents.find(agent => agent.id === agentId);
              
              if (stillExists) {
                console.log(`   ‚ùå PROBLEMA: Agente ainda existe na lista!`);
                console.log(`   üìä Dados do agente: ${JSON.stringify(stillExists, null, 2)}`);
              } else {
                console.log(`   ‚úÖ Agente foi removido da lista corretamente`);
              }
            } else {
              console.log(`   ‚ö†Ô∏è Formato de resposta inesperado: ${typeof response}`);
            }
          }
          
        } else {
          const errorText = await deleteResponse.text();
          console.log(`   ‚ùå Erro na exclus√£o: ${errorText}`);
        }
        
      } else {
        console.log(`   ‚ùå N√£o foi poss√≠vel obter ID do agente criado`);
      }
    } else {
      console.log(`   ‚ùå Falha ao criar agente de teste: ${createResponse.status}`);
    }
    
    console.log('\nüìã Checklist para debug no navegador:');
    console.log('1. Abra o DevTools (F12)');
    console.log('2. V√° para a aba Console');
    console.log('3. Clique no bot√£o de exclus√£o');
    console.log('4. Verifique se aparecem erros no console');
    console.log('5. V√° para a aba Network');
    console.log('6. Clique no bot√£o de exclus√£o novamente');
    console.log('7. Verifique se a requisi√ß√£o DELETE aparece');
    console.log('8. Verifique o status da requisi√ß√£o (200 = sucesso)');
    console.log('9. Verifique se o estado do React est√° atualizando');
    
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('1. Se n√£o aparecer requisi√ß√£o: Problema no onClick do bot√£o');
    console.log('2. Se requisi√ß√£o falhar: Problema de rede/CORS');
    console.log('3. Se requisi√ß√£o suceder mas lista n√£o atualizar: Problema no setState');
    console.log('4. Se confirma√ß√£o n√£o aparecer: Problema no confirm()');
    
  } catch (error) {
    console.error('‚ùå Erro durante debug:', error);
  }
}

debugFrontendDeletion().catch(console.error);